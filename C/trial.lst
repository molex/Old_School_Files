PROGRAM LISTING E:\Documents and Settings\Administrator\Desktop\trial compiled Thu Aug 07 20:41:34 2008


*1*
typedef unsigned int name0 sep 
typedef unsigned int size_t;

*2*
typedef struct '{' int name1 sep int name1 sep unsigned name0 sep char name1 sep int name1 sep char name1 sep '}' name0 sep 
typedef struct { int _file;   int _flag;   unsigned _bufsiz;  char *_ptr;   int _cnt;   char *_base;  } FILE;

*3*
extern utype name0 '[' int ']' sep 
extern FILE _files[32];

*4*
utype name0 '(' char name0 ',' char name0 ')' sep 
FILE *fopen(char *name, char *mode);

*5*
int name0 '(' utype name0 ')' sep 
int   fclose(FILE *fp);

*6*
int name0 '(' void name0 ',' int name0 ',' int name0 ',' utype name0 ')' sep 
int   fread(void *buf, int sizelem, int n, FILE *fp);

*7*
int name0 '(' void name0 ',' int name0 ',' int name0 ',' utype name0 ')' sep 
int   fwrite(void *buffer,int sizelem, int n,FILE *fp);

*8*
int name0 '(' utype name0 ')' sep 
int   feof(FILE *fp);

*9*
int name0 '(' utype name0 ')' sep 
int   ferror(FILE *fp);

*10*
int name0 '(' utype name0 ')' sep 
int   fflush(FILE *fp);

*11*
void name0 '(' utype name0 ')' sep 
void  clearerr(FILE *fp);

*12*
int name0 '(' utype name0 ',' long name0 ',' int name0 ')' sep 
int   fseek(FILE *fp,long offset,int origin);

*13*
long name0 '(' utype name0 ')' sep 
long  ftell(FILE *fp);

*14*
int name0 '(' utype name0 ',' char name0 ',' ... ')' sep 
int   fscanf(FILE *fp,char *format,...);

*15*
int name0 '(' char name0 ',' ... ')' sep 
int   scanf(char *format,...);

*16*
int name0 '(' char name0 ',' char name0 ',' ... ')' sep 
int   sscanf(char *buf, char *fmt, ...);

*17*
int name0 '(' utype name0 ',' char name0 ',' ... ')' sep 
int   fprintf(FILE *fp, char *fmt, ...);

*18*
int name0 '(' char name0 ',' ... ')' sep 
int   printf(char *fmt, ...);

*19*
int name0 '(' char name0 ',' char name0 ',' ... ')' sep 
int   sprintf(char *buf, char *fmt, ...);

*20*
int name0 '(' char name0 ',' char name0 ',' char name0 ')' sep 
int   vsprintf(char *buf, char *fmt, char *args);

*21*
int name0 '(' utype name0 ')' sep 
int   fgetc(FILE *fp);

*22*
char name0 '(' char name0 ',' int name0 ',' utype name0 ')' sep 
char *fgets(char *buf, int n, FILE *fp);

*23*
int name0 '(' utype name0 ')' sep 
int   getc(FILE *fp);

*24*
int name0 '(' ')' sep 
int   getchar();

*25*
char name0 '(' char name0 ')' sep 
char *gets(char *buf);

*26*
int name0 '(' int name0 ',' utype name0 ')' sep 
int   ungetc(int c, FILE *fp);

*27*
int name0 '(' int name0 ',' utype name0 ')' sep 
int   fputc(int c, FILE *fp);

*28*
int name0 '(' char name0 ',' utype name0 ')' sep 
int   fputs(char *str, FILE *fp);

*29*
int name0 '(' int name0 ',' utype name0 ')' sep 
int   putc(int c, FILE *fp);

*30*
int name0 '(' int name0 ')' sep 
int   putchar(int c);

*31*
int name0 '(' char name0 ')' sep 
int   puts(char *str);

*32*
name0 '(' ')' '{' 
main() {

*33*
int name0 '=' int sep doinit type 'int', ilistx 0, darix -1

variable exgen
exgen i=0 epix=1
 0: number (0,2,0) 

int iResponse = 0;

*34*
fun 
printf

*35*
'(' string ')' sep 
variable exgen
exgen i=2 epix=3
 0: fun (14,2,0) 
 1: string (2,0,0) 
 2: fcall (0,0,1) [1]  

variable exgen
exgen i=1 epix=0

variable exgen
exgen i=0 epix=0

("Enter a number from 1 to 10: ");

*36*
fun '(' string ',' '&' local ')' sep 
variable exgen
exgen i=4 epix=5
 0: fun (11,2,0) 
 1: string (32,1,0) 
 2: local (0,0,1) 
 3: adr (2,9,37) 
 4: fcall (0,0,2) [1,3]  

variable exgen
exgen i=3 epix=0

variable exgen
exgen i=2 epix=0

variable exgen
exgen i=1 epix=0

variable exgen
exgen i=0 epix=0

scanf("%d", &iResponse);

*37*
if '(' local lt int || local gt int ')' 
variable exgen
exgen i=6 epix=7
 0: local (0,2,0) 
 1: number (1,2,0) 
 2: cmpr (0,1,3) 
 3: local (0,9,37) 
 4: number (10,2,2) 
 5: cmpr (3,4,2) 
 6: lor (2,5,38) 

variable exgen
exgen i=2 epix=0

variable exgen
exgen i=0 epix=0

variable exgen
exgen i=1 epix=0

variable exgen
exgen i=5 epix=0

variable exgen
exgen i=3 epix=0

variable exgen
exgen i=4 epix=0

if (iResponse <1 || iResponse >10)

*38*
fun '(' string ')' sep 
variable exgen
exgen i=2 epix=3
 0: fun (14,2,0) 
 1: string (35,2,0) 
 2: fcall (0,0,1) [1]  

variable exgen
exgen i=1 epix=0

variable exgen
exgen i=0 epix=0

printf("\nNumber not in range\n");

*39*
else fun '(' string ')' sep 
variable exgen
exgen i=2 epix=3
 0: fun (14,2,0) 
 1: string (57,3,0) 
 2: fcall (0,0,1) [1]  

variable exgen
exgen i=1 epix=0

variable exgen
exgen i=0 epix=0

else printf("\nThank You!\n");

*40*
'}' 
}

*41*

local variables:
  0	  -1  iResponse :	       2, int

locals by index:
 0: 
 1: 
 2: 
 3: 
 4: 
 5: 
 6: 
 7: 
 8: iResponse 
 9: 
10: 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: 
20: 
21: 
22: 
23: 
24: 
25: 

0 local statics

there are 0 local typedefs

labels


there are 0 local enumeration types

there are 0 local structs/unions

eof 
0% cg used

*41*

functions by index:
 0: 
 1: 
 2: clearerr 
 3: 
 4: 
 5: fopen fclose fread fwrite feof ferror fflush fseek ftell fscanf fprintf fgetc fgets fputc fputs 
 6: getc getchar gets 
 7: 
 8: 
 9: 
10: 
11: 
12: main 
13: 
14: 
15: printf putc putchar puts 
16: 
17: 
18: scanf sscanf sprintf 
19: 
20: ungetc 
21: vsprintf 
22: 
23: 
24: 
25: 

globals by index:
 0: 
 1: 
 2: 
 3: 
 4: 
 5: 
 6: 
 7: 
 8: 
 9: 
10: 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: 
20: 
21: 
22: 
23: 
24: 
25: 

intern:	main 

extern:	fopen fclose fread fwrite feof ferror fflush clearerr 
	fseek ftell fscanf scanf sscanf fprintf printf sprintf 
	vsprintf fgetc fgets getc getchar gets ungetc fputc 
	fputs putc putchar puts 


function types:
  0    **struct $0	parms:   *char   *char
  1            int	parms: *struct $0
  2            int	parms:   *void     int     int *struct $0
  3           void	parms: *struct $0
  4            int	parms: *struct $0    long     int
  5           long	parms: *struct $0
  6            int	parms: *struct $0   *char ...
  7            int	parms:   *char ...
  8            int	parms:   *char   *char ...
  9            int	parms:   *char   *char   *char
 10         **char	parms:   *char     int *struct $0
 11            int	parms:
 12         **char	parms:   *char
 13            int	parms:     int *struct $0
 14            int	parms:   *char *struct $0
 15            int	parms:     int
 16            int	parms:   *char
 17            int	parms:

functions:
  0          fopen	type=   0
  1         fclose	type=   1
  2          fread	type=   2
  3         fwrite	type=   2
  4           feof	type=   1
  5         ferror	type=   1
  6         fflush	type=   1
  7       clearerr	type=   3
  8          fseek	type=   4
  9          ftell	type=   5
 10         fscanf	type=   6
 11          scanf	type=   7
 12         sscanf	type=   8
 13        fprintf	type=   6
 14         printf	type=   7
 15        sprintf	type=   8
 16       vsprintf	type=   9
 17          fgetc	type=   1
 18          fgets	type=  10
 19           getc	type=   1
 20        getchar	type=  11
 21           gets	type=  12
 22         ungetc	type=  13
 23          fputc	type=  13
 24          fputs	type=  14
 25           putc	type=  13
 26        putchar	type=  15
 27           puts	type=  16
 28           main	type=  17

function offsets:
           main	offs= 0

there are 1 globals:
           name     type siz x d offs type
         _files    10080 384 1 0    0 struct $0 [32]

there are 2 global typedefs
         size_t            uint
           FILE       struct $0

there are 0 global enumeration types

there are 1 global structs/unions
struct $0:  (size 12)
	     _file  +0      int 
	     _flag  +2      int 
	   _bufsiz  +4      uint 
	      _ptr  +6      *char 
	      _cnt  +8      int 
	     _base  +10     *char 

static size=70

totalmalloc=0
